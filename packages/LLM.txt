# LLM.txt - Meteora Packages

This directory contains shared configurations and utilities used across the Meteora Invent monorepo.

## Packages Overview

The packages workspace provides:
- Shared ESLint configurations
- Prettier formatting rules
- TypeScript configurations
- Common utility functions
- Consistent development standards

## Package Structure

```
packages/
├── config/           # Configuration packages
│   ├── eslint/      # ESLint rules
│   ├── prettier/    # Code formatting
│   └── typescript/  # TypeScript configs
└── shared/          # Shared code
    └── utils/       # Utility functions
```

## Available Packages

### @meteora-invent/config-eslint
**Location**: `packages/config/eslint`
**Purpose**: Shared ESLint rules for consistent code quality
**Variants**:
- `index.js`: Base configuration
- `next.js`: Next.js specific rules
- `node.js`: Node.js specific rules

### @meteora-invent/config-prettier
**Location**: `packages/config/prettier`
**Purpose**: Consistent code formatting across all workspaces
**Features**:
- 2-space indentation
- Single quotes
- Trailing commas
- Consistent formatting rules

### @meteora-invent/config-typescript
**Location**: `packages/config/typescript`
**Purpose**: Shared TypeScript configurations
**Variants**:
- `base.json`: Common settings
- `nextjs.json`: Next.js projects
- `node.json`: Node.js scripts

### @meteora-invent/utils
**Location**: `packages/shared/utils`
**Purpose**: Common utility functions
**Includes**:
- Number formatting (`numbers.ts`)
- Text formatting (`formatting.ts`)
- Common helpers and utilities

## Using Packages

### In Studio Actions
```json
// In studio/package.json
{
  "devDependencies": {
    "@meteora-invent/config-eslint": "workspace:*",
    "@meteora-invent/config-prettier": "workspace:*",
    "@meteora-invent/config-typescript": "workspace:*"
  }
}
```

### In Scaffolds
```json
// In scaffolds/fun-launch/package.json
{
  "devDependencies": {
    "@meteora-invent/config-eslint": "workspace:*",
    "@meteora-invent/config-prettier": "workspace:*",
    "@meteora-invent/config-typescript": "workspace:*"
  }
}
```

### ESLint Configuration
```javascript
// eslint.config.js
import config from "@meteora-invent/config-eslint";
export default config;
```

### TypeScript Configuration
```json
// tsconfig.json
{
  "extends": "@meteora-invent/config-typescript/nextjs.json",
  "compilerOptions": {
    // Project-specific overrides
  }
}
```

### Prettier Configuration
```json
// .prettierrc
"@meteora-invent/config-prettier"
```

## Utility Functions

### Number Formatting
```typescript
import { formatNumber, formatCurrency } from '@meteora-invent/utils';

formatNumber(1234567.89); // "1,234,567.89"
formatCurrency(1234.56);   // "$1,234.56"
```

### String Utilities
```typescript
import { truncateAddress, toTitleCase } from '@meteora-invent/utils';

truncateAddress("EPjFWdd5..."); // "EPjF...Wdd5"
toTitleCase("hello world");     // "Hello World"
```

## Adding New Packages

### 1. Create Package Directory
```bash
mkdir -p packages/category/package-name
cd packages/category/package-name
```

### 2. Initialize Package
```json
// package.json
{
  "name": "@meteora-invent/package-name",
  "version": "1.0.0",
  "main": "index.js",
  "types": "index.d.ts"
}
```

### 3. Add to Workspace
The package is automatically included via pnpm workspace.

### 4. Use in Other Packages
```bash
pnpm add @meteora-invent/package-name --workspace
```

## Package Development

### Building Packages
```bash
# From root directory
pnpm build

# Specific package
pnpm --filter @meteora-invent/utils build
```

### Testing Changes
1. Make changes to package
2. Run `pnpm build` in package directory
3. Changes immediately available to consumers

### Publishing (Internal)
Packages are not published to npm.
They're used internally via workspace protocol.

## Best Practices

### 1. Keep Packages Focused
- Single responsibility
- Clear purpose
- Minimal dependencies

### 2. Version Management
- Use workspace protocol
- Keep versions synchronized
- Document breaking changes

### 3. Documentation
- Clear README in each package
- JSDoc for functions
- Usage examples

### 4. Type Safety
- Always include TypeScript types
- Export type definitions
- Use strict mode

## Common Issues

### "Cannot find module"
- Run `pnpm install` from root
- Check package name spelling
- Verify workspace reference

### "Type errors"
- Rebuild packages: `pnpm build`
- Check TypeScript config extends
- Verify type exports

### "Linting errors"
- Ensure ESLint config is extended
- Check for conflicting rules
- Run `pnpm lint:fix`

## Package Maintenance

### Updating Dependencies
```bash
# Update all packages
pnpm update -r

# Update specific package
pnpm update @package/name -r
```

### Adding Dependencies
```bash
# Add to specific package
cd packages/shared/utils
pnpm add lodash
```

### Checking Consistency
```bash
# From root
pnpm syncpack:check
pnpm syncpack:fix
```

## Integration Benefits

1. **Consistency**: Same rules everywhere
2. **Maintainability**: Update once, apply everywhere
3. **Type Safety**: Shared types across projects
4. **Code Reuse**: Common utilities available
5. **Standards**: Enforced code quality

## Next Steps

- Use shared configs in your workspace
- Import utilities where needed
- Contribute new utilities
- Maintain consistency

## Related Documentation
- Parent: Repository root `LLM.txt`
- Consumers: `studio/LLM.txt`, `scaffolds/LLM.txt`
