# LLM.txt - Meteora Studio

**AI-Optimized Guide for Meteora Studio Automation**

## 🎯 Quick AI Context

Meteora Studio is a TypeScript-based automation toolkit for Meteora's Solana DeFi Operations. All actions use **JSON configuration files**, making them AI-friendly and easily automatable.

### Core Architecture
- **Config-driven**: All parameters are in `studio/config/*.jsonc` files
- **CLI-based**: Actions are executed via `pnpm studio [command]`
- **Modular**: Each protocol (DBC, DAMM v1, DAMM v2, DLMM) has dedicated actions
- **Safe**: Built-in dry-run mode for testing

## 🛠️ Initial Setup & Prerequisites

### Prerequisites
- **Node.js** >= 18.0.0
- **pnpm** >= 9.0.0
- Valid Solana wallet with SOL balance
- RPC endpoint (recommended: [Helius](https://www.helius.dev/), QuickNode, or similar)

### Installation & Configuration

1. **Install dependencies** (from repository root):
```bash
pnpm install
```

2. **Environment setup**:
```bash
# Copy environment template
cp studio/.env.example studio/.env

# Edit .env file with:
# PAYER_PRIVATE_KEY=your_wallet_private_key_in_base58_format
# RPC_URL=your_rpc_endpoint_url_optional_but_recommended
```

3. **Generate keypair**:
```bash
pnpm studio generate-keypair
```

4. **Configure protocol settings**:
   - Edit relevant config files in `studio/config/` directory
   - Use provided examples as starting points
   - Replace placeholder values with actual addresses/parameters

## 🚀 Available Actions & Commands

### Environment Setup
```bash
# Generate keypair from private key
pnpm studio generate-keypair

# For devnet (airdrops 5 SOL)
pnpm studio generate-keypair --network devnet --airdrop

# For localnet (airdrops 5 SOL)
# Ensure that you have already started the local validator with pnpm start-test-validator
pnpm studio generate-keypair --network localnet --airdrop

# Airdrop SOL to keypair (devnet/localnet only)
# Airdrop 5 SOL on devnet
pnpm studio airdrop-sol --network devnet

# Airdrop 5 SOL on localnet
pnpm studio airdrop-sol --network localnet

# Start local test validator (for development)
pnpm studio start-test-validator
```

### DBC (Dynamic Bonding Curve) - Bonding Curve with Virtual Liquidity
```bash
# Create a DBC Config
pnpm studio dbc-create-config

# Create a DBC Pool
pnpm studio dbc-create-pool
# If you already have an existing DBC config key:
pnpm studio dbc-create-pool --config <YOUR_DBC_CONFIG_KEY>

# Swap (Buy/Sell)
pnpm studio dbc-swap --baseMint <YOUR_BASE_MINT_ADDRESS>

# Claim Trading Fees
pnpm studio dbc-claim-trading-fee --baseMint <YOUR_BASE_MINT_ADDRESS>

# Migrate to DAMM v1
pnpm studio dbc-migrate-to-damm-v1 --baseMint <YOUR_BASE_MINT_ADDRESS>

# Migrate to DAMM v2
pnpm studio dbc-migrate-to-damm-v2 --baseMint <YOUR_BASE_MINT_ADDRESS>
```

### DAMM V1 (Dynamic AMM V1) - Constant Product AMM v1
```bash
# Create a Constant Product Pool
pnpm studio damm-v1-create-pool
# If you already have a base mint:
pnpm studio damm-v1-create-pool --baseMint <YOUR_BASE_MINT_ADDRESS>

# Lock Liquidity
pnpm studio damm-v1-lock-liquidity --baseMint <YOUR_BASE_MINT_ADDRESS>

# Create a Stake2Earn Farm
pnpm studio damm-v1-create-stake2earn-farm --baseMint <YOUR_BASE_MINT_ADDRESS>

# Lock Liquidity (Stake2Earn)
pnpm studio damm-v1-lock-liquidity-stake2earn --baseMint <YOUR_BASE_MINT_ADDRESS>
```

### DAMM V2 (Dynamic AMM V2) - Constant Product AMM v2
```bash
# Create a Balanced Constant Product Pool
pnpm studio damm-v2-create-balanced-pool
# If you already have a base mint:
pnpm studio damm-v2-create-balanced-pool --baseMint <YOUR_BASE_MINT_ADDRESS>

# Create a One-Sided Pool
pnpm studio damm-v2-create-one-sided-pool
# If you already have a base mint:
pnpm studio damm-v2-create-one-sided-pool --baseMint <YOUR_BASE_MINT_ADDRESS>

# Split Position
pnpm studio damm-v2-split-position --poolAddress <YOUR_POOL_ADDRESS>

# Claim Position Fee
pnpm studio damm-v2-claim-position-fee --poolAddress <YOUR_POOL_ADDRESS>

# Add Liquidity
pnpm studio damm-v2-add-liquidity --poolAddress <YOUR_POOL_ADDRESS>

# Remove Liquidity
pnpm studio damm-v2-remove-liquidity --poolAddress <YOUR_POOL_ADDRESS>

# Close Position
pnpm studio damm-v2-close-position --poolAddress <YOUR_POOL_ADDRESS>
```

### DLMM (Dynamic Liquidity Market Maker) - Concentrated Liquidity Market Maker
```bash
# Create a Customizable Permissionless DLMM Pool
pnpm studio dlmm-create-pool
# If you already have a base mint:
pnpm studio dlmm-create-pool --baseMint <YOUR_BASE_MINT_ADDRESS>

# Seed Liquidity (LFG)
pnpm studio dlmm-seed-liquidity-lfg --baseMint <YOUR_BASE_MINT_ADDRESS>

# Seed Liquidity (Single Bin)
pnpm studio dlmm-seed-liquidity-single-bin --baseMint <YOUR_BASE_MINT_ADDRESS>

# Set DLMM Pool Status
pnpm studio dlmm-set-pool-status --poolAddress <YOUR_POOL_ADDRESS>
```

### Alpha Vault - Yield Strategies
```bash
# Create an Alpha Vault
pnpm studio alpha-vault-create --baseMint <YOUR_BASE_MINT_ADDRESS>
```

## 📋 Configuration System

### Configuration Files Location
All configurations are in `studio/config/`:
- `dbc_config.jsonc` - Dynamic Bonding Curve settings
- `damm_v1_config.jsonc` - DAMM V1 pool settings  
- `damm_v2_config.jsonc` - DAMM V2 pool settings
- `dlmm_config.jsonc` - DLMM pool settings
- `alpha_vault_config.jsonc` - Alpha Vault settings

### Key Configuration Parameters

#### Universal Settings (all configs)
```jsonc
{
  "rpcUrl": "https://api.devnet.solana.com",  // Network endpoint
  // mainnet: https://api.mainnet-beta.solana.com 
  // devnet: https://api.devnet.solana.com 
  // localnet: http://localhost:8899
  
  "dryRun": false,                            // If true, transactions simulated only
  "keypairFilePath": "./keypair.json",        // Wallet file (payer + signer)
  "computeUnitPriceMicroLamports": 100000,    // Transaction priority fees
  "quoteMint": "So11111111111111111111111111111111111111112" // SOL or USDC or other token
}
```

#### DBC-Specific Settings
```jsonc
{
  "dbcConfig": {
    "buildCurveMode": 0, // 0: buildCurve | 1: buildCurveWithMarketCap | 
                        // 2: buildCurveWithTwoSegments | 3: buildCurveWithLiquidityWeights
    
    // Mode 0 (buildCurve) Parameters:
    "percentageSupplyOnMigration": 20, // % of total token supply to migrate
    "migrationQuoteThreshold": 10, // Quote threshold needed to migrate
    
    // Mode 1 (buildCurveWithMarketCap) Parameters:
    // "initialMarketCap": 20, // Market cap when pool created (quoteMint terms)
    // "migrationMarketCap": 600, // Market cap when pool graduates
    
    // Mode 2 (buildCurveWithTwoSegments) adds percentageSupplyOnMigration
    // Mode 3 (buildCurveWithLiquidityWeights) adds liquidityWeights array
    
    "totalTokenSupply": 1000000000, // Total token supply (not in lamports)
    "migrationOption": 1, // 0: Migrate to DAMM v1 | 1: Migrate to DAMM v2
    "tokenBaseDecimal": 6, // Token decimals
    "tokenQuoteDecimal": 9, // Quote token decimals
    
    "lockedVestingParam": {
      "totalLockedVestingAmount": 0, // Locked vesting amount (not in lamports)
      "numberOfVestingPeriod": 0, // Number of vesting periods
      "cliffUnlockAmount": 0, // Cliff unlock amount
      "totalVestingDuration": 0, // Vesting duration (seconds)
      "cliffDurationFromMigrationTime": 0 // Cliff delay (seconds)
    },
    
    "baseFeeParams": {
      "baseFeeMode": 0, // 0: Linear | 1: Exponential | 2: Rate Limiter
      "feeSchedulerParam": {
        "startingFeeBps": 100, // Starting fee (max 99% = 9900 bps)
        "endingFeeBps": 100, // Ending fee (min 0.01% = 1 bps)
        "numberOfPeriod": 0, // Number of periods
        "totalDuration": 0 // Duration (slots/timestamp based on activationType)
      }
    },
    
    "dynamicFeeEnabled": true, // Adds 20% of minimum base fee to total
    "activationType": 1, // 0: Slot | 1: Timestamp
    "collectFeeMode": 0, // 0: Quote Token | 1: Output Token
    "migrationFeeOption": 3, // 0: 0.25% | 1: 0.3% | 2: 1% | 3: 2% | 4: 4% | 5: 6%
    "tokenType": 0, // 0: SPL | 1: Token 2022
    
    "partnerLpPercentage": 100, // Partner claimable LP after migration
    "creatorLpPercentage": 0, // Creator claimable LP after migration
    "partnerLockedLpPercentage": 0, // Partner permanently locked LP
    "creatorLockedLpPercentage": 0, // Creator permanently locked LP
    "creatorTradingFeePercentage": 0, // Creator fee share (0-100%)
    "leftover": 0, // Leftover tokens (claimable after migration)
    "tokenUpdateAuthority": 1 // 0: Creator | 1: Immutable | 2: Partner | etc.
  },
  
  "dbcPool": {
    "name": "YOUR_TOKEN_NAME",
    "symbol": "YOUR_TOKEN_SYMBOL",
    "metadata": {
      "image": "./data/image/test-token.jpg", // Image path or URL
      "description": "YOUR_TOKEN_DESCRIPTION",
      "website": "https://example.com",
      "twitter": "https://x.com/yourproject",
      "telegram": "https://t.me/yourproject"
    }
  },
  
  "dbcSwap": {
    "amountIn": 1.03, // Amount to swap
    "slippageBps": 100, // Slippage in basis points
    "swapBaseForQuote": false, // true: base→quote | false: quote→base
    "referralTokenAccount": null // Optional referral account
  }
}
```

#### DAMM V1 Settings
```jsonc
{
  "createBaseToken": {
    "supply": 1000000000, // Total token supply to mint
    "decimals": 6, // Token decimals
    "name": "Test Token",
    "symbol": "TT",
    "authorities": {
      "mint": "YOUR_MINT_AUTHORITY_ADDRESS", // null for no authority
      "freeze": "YOUR_FREEZE_AUTHORITY_ADDRESS",
      "update": "YOUR_UPDATE_AUTHORITY_ADDRESS"
    },
    "metadata": {
      "image": "./data/image/test-token.jpg",
      "description": "YOUR_TOKEN_DESCRIPTION",
      "website": "https://example.com"
    }
  },
  
  "dammV1Config": {
    "baseAmount": 100, // Base token amount for pool
    "quoteAmount": 0.001, // Quote token amount for pool
    "tradeFeeNumerator": 2500, // Pool fee in bps
    "activationType": 1, // 0: Slot | 1: Timestamp
    "activationPoint": null, // When pool becomes active
    "hasAlphaVault": false // Create alpha vault with pool
  },
  
  "dammV1LockLiquidity": {
    "allocations": [
      {
        "percentage": 80, // % of LP tokens to address
        "address": "YOUR_ADDRESS_1"
      }
    ]
  }
}
```

#### DAMM V2 Settings
```jsonc
{
  "dammV2Config": {
    "creator": "YOUR_CREATOR_ADDRESS",
    "baseAmount": 100000000, // Base token amount
    "quoteAmount": null, // Quote token amount (or null)
    "initPrice": 0.001, // Initial price (quote/base)
    "maxPrice": null, // Maximum price
    
    "poolFees": {
      "maxBaseFeeBps": 120, // Maximum base fee in bps
      "minBaseFeeBps": 120, // Minimum base fee in bps
      "numberOfPeriod": 0, // Fee scheduler periods
      "totalDuration": 0, // Fee scheduler duration
      "feeSchedulerMode": 0, // 0: Linear | 1: Exponential
      "useDynamicFee": true // Enable dynamic fees (20% of minBaseFeeBps)
    },
    
    "collectFeeMode": 1, // 0: Both Token | 1: Token B Only
    "activationType": 1, // 0: Slot | 1: Timestamp
    "activationPoint": null, // When pool becomes active
    "hasAlphaVault": false
  },
  
  "addLiquidity": {
    "amountIn": 5, // Amount to add
    "isTokenA": false // true: token A | false: token B
  },
  
  "splitPosition": {
    "newPositionOwner": "YOUR_NEW_POSITION_OWNER_ADDRESS",
    "unlockedLiquidityPercentage": 50, // % of unlocked liquidity to split
    "permanentLockedLiquidityPercentage": 50,
    "feeAPercentage": 50, // % of unclaimed fees to transfer
    "feeBPercentage": 50
  }
}
```

#### DLMM Settings
```jsonc
{
  "dlmmConfig": {
    "binStep": 25, // Price increment % in bps (400 = 4% step)
    "feeBps": 1, // Trading fee in bps (200 = 2%)
    "initialPrice": 1.333, // Initial price (quote/base)
    "activationType": 1, // 0: Slot | 1: Timestamp
    "activationPoint": null, // When pool becomes active
    "priceRounding": "up", // "up" or "down" for bin ID conversion
    "creatorPoolOnOffControl": true, // Creator can enable/disable trading
    "hasAlphaVault": false
  },
  
  "lfgSeedLiquidity": {
    "minPrice": 0.003393, // Minimum price boundary
    "maxPrice": 0.004393, // Maximum price boundary
    "curvature": 0.6, // Distribution curvature (0-1, lower = more concentrated)
    "seedAmount": "200000", // Total liquidity amount
    "positionOwner": "YOUR_POSITION_OWNER_ADDRESS",
    "feeOwner": "YOUR_FEE_OWNER_ADDRESS",
    "lockReleasePoint": 0, // When position becomes withdrawable (0 = immediate)
    "seedTokenXToPositionOwner": true
  },
  
  "singleBinSeedLiquidity": {
    "price": 1.333, // Exact price for single bin
    "priceRounding": "up",
    "seedAmount": "750000000", // Amount of token X to seed
    "positionOwner": "YOUR_POSITION_OWNER_ADDRESS",
    "feeOwner": "YOUR_FEE_OWNER_ADDRESS",
    "lockReleasePoint": 0
  }
}
```

#### Alpha Vault Settings (for all pool types)
```jsonc
{
  "alphaVault": {
    "poolType": "dlmm", // "dlmm" | "dynamic" (v1) | "damm2" (v2)
    "alphaVaultType": "fcfs", // "fcfs" | "prorata"
    
    // FCFS Parameters:
    "maxDepositCap": 10000, // Max total deposit (quote token)
    "individualDepositingCap": 1, // Max per user (quote token)
    
    // Prorata Parameters:
    // "maxBuyingCap": 10000, // Max total buying cap
    
    "depositingPoint": 1733626299, // When deposits start
    "startVestingPoint": 1746808201, // When vesting begins
    "endVestingPoint": 1746808201, // When vesting ends
    "escrowFee": 0, // Fee for stake escrow account
    "whitelistMode": "permissionless" // "permissionless" | "permissioned_with_merkle_proof" | "permissioned_with_authority"
  }
}
```

## 🛡️ Safety Features

### Dry Run Mode
Set `"dryRun": true` in any config file to simulate transactions without execution:
```jsonc
{
  "dryRun": true  // Simulates only, no real transactions
}
```

### Network Switching
Change `rpcUrl` to switch networks:
```jsonc
{
  "rpcUrl": "https://api.mainnet-beta.solana.com",  // Mainnet
  "rpcUrl": "https://api.devnet.solana.com",        // Devnet  
  "rpcUrl": "http://localhost:8899"                 // Localnet
}
```

## 📊 Output Interpretation

### Successful Transaction Output
```
✅ Transaction successful
📋 Transaction Signature: [SIGNATURE_HASH]
🏊 Pool Address: [POOL_PUBKEY]
💰 Token Mint: [TOKEN_MINT_PUBKEY]
```

### Error Output Patterns
```
❌ Error: Insufficient funds
❌ Error: Invalid mint address
❌ Error: RPC connection failed
❌ Error: Configuration validation failed
```

## 📖 Protocol Details & Understanding

### DBC (Dynamic Bonding Curve)
**Purpose**: Permissionless token launch protocol with customizable virtual curves
- Allows creation of new tokens with bonding curve pricing
- Price increases as more tokens are purchased
- Automatic migration to AMM when curve completes
- Built-in fee mechanisms and vesting options
- Ideal for fair launch mechanics and price discovery

### DAMM V1 (Dynamic AMM V1) 
**Purpose**: Constant product AMM with lending integration
- Supports token prices from 0 to infinity
- LPs earn additional yield through lending sources
- Traditional swap fees plus lending returns
- Lower transaction costs
- Integrated with Dynamic Vaults for yield optimization

### DAMM V2 (Dynamic AMM V2)
**Purpose**: Enhanced constant product AMM with advanced features
- SPL and Token 2022 support
- Optional concentrated liquidity with position NFTs
- Dynamic fee structure with on-chain fee scheduler
- Flexible liquidity locks and in-built farming
- New fee claiming mechanism with token selection
- **Not** integrated with Dynamic Vaults (unlike V1)

### DLMM (Dynamic Liquidity Market Maker)
**Purpose**: Concentrated liquidity with dynamic fee optimization
- Real-time dynamic fees that capitalize on volatility
- Precise liquidity concentration in specific price ranges
- Flexible volatility strategy selection
- Active position management capabilities
- Maximum capital efficiency for experienced LPs

### Alpha Vault
**Purpose**: Automated yield strategies and vault management
- Automated yield optimization strategies
- Professional vault management
- Risk-adjusted returns
- Institutional-grade features

## 🧠 AI Decision Making

### When to Use Which Protocol

**DBC (Dynamic Bonding Curve)**
- ✅ New token launches
- ✅ Price discovery phase
- ✅ Fair launch mechanics
- ✅ Automated migration to AMM
- ✅ Need customizable launch parameters

**DAMM V1 (Dynamic AMM V1)**
- ✅ Standard LP provision with yield
- ✅ Yield farming integration
- ✅ Lending protocol compatibility
- ✅ Lower gas fees
- ✅ Want vault yield integration

**DAMM V2 (Dynamic AMM V2)**  
- ✅ Advanced AMM features
- ✅ Dynamic fees
- ✅ Enhanced capital efficiency
- ✅ Professional trading
- ✅ Token 2022 compatibility
- ✅ Need position NFTs

**DLMM (Dynamic Liquidity Market Maker)**
- ✅ Concentrated liquidity
- ✅ Active position management
- ✅ Dynamic fee adjustment
- ✅ Maximum capital efficiency
- ✅ Volatility-based strategies

## 🔍 Common AI Tasks

### Task: Create and Launch Token
```bash
# 1. Edit dbc_config.jsonc with token details
# 2. Create configuration
pnpm studio dbc-create-config
# 3. Launch token
pnpm studio dbc-create-pool
```

### Task: Create AMM Pool
```bash
# 1. Edit damm_v2_config.jsonc with token pairs
# 2. Create pool
pnpm studio damm-v2-create-balanced-pool
```

### Task: Add Liquidity to DLMM
```bash
# 1. Edit dlmm_config.jsonc with position details
# 2. Seed liquidity
pnpm studio dlmm-seed-liquidity-lfg
```

## 🛠️ Troubleshooting & Common Issues

### Configuration Best Practices

#### Essential Steps Before Execution
1. **Set Network Correctly**:
   ```jsonc
   "rpcUrl": "https://api.devnet.solana.com" // Use devnet for testing
   ```

2. **Use Dry Run for Testing**:
   ```jsonc
   "dryRun": true // Simulate transactions without execution
   ```

3. **Configure Proper Token Authorities**:
   ```jsonc
   "authorities": {
     "mint": null, // null = revoke mint authority (recommended)
     "freeze": null, // null = revoke freeze authority
     "update": "YOUR_ADDRESS" // Keep update authority if needed
   }
   ```

4. **Set Appropriate Fee Levels**:
   ```jsonc
   // For DBC
   "startingFeeBps": 100, // 1% (reasonable starting fee)
   
   // For DAMM V2
   "minBaseFeeBps": 120, // 1.2% (consider market standards)
   
   // For DLMM
   "feeBps": 1 // 0.01% (very low for concentrated liquidity)
   ```

5. **Configure Alpha Vault Security**:
   ```jsonc
   "whitelistMode": "permissionless", // Start permissionless for testing
   "maxDepositCap": 10000, // Reasonable cap to limit exposure
   "individualDepositingCap": 1 // Prevent whale dominance
   ```

### Pre-Execution Validation
```bash
# 1. Validate JSONC syntax (handles comments)
node -e "console.log('Config valid:', require('jsonc-parser').parse(require('fs').readFileSync('./config/dbc_config.jsonc', 'utf8')))"

# 2. Check keypair exists and SOL balance
pnpm studio generate-keypair

# 3. Test RPC connection
curl -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1,"method":"getHealth"}' YOUR_RPC_URL

# 4. Verify token metadata image exists
ls -la ./data/image/test-token.jpg
```

### Common Error Solutions

#### **"Configuration validation failed"**
- ✅ Check JSON syntax with validator
- ✅ Ensure all required fields are present
- ✅ Verify mint addresses are valid base58 strings
- ✅ Check decimal values are within valid ranges

#### **"Insufficient SOL balance"**
- ✅ Add SOL to wallet (≥0.1 SOL recommended)
- ✅ Switch to devnet for testing (free SOL available)
- ✅ Check `computeUnitPriceMicroLamports` isn't too high

#### **"Transaction simulation failed"**
- ✅ Verify RPC endpoint is responsive
- ✅ Check all token mint addresses exist on the network
- ✅ Ensure wallet has sufficient balance for all tokens
- ✅ Validate fee parameters are within acceptable ranges

#### **"RPC connection failed"**
- ✅ Verify RPC URL is correct and accessible
- ✅ Check for rate limiting (use premium RPC)
- ✅ Test with public RPC as backup
- ✅ Ensure network connectivity

#### **"Invalid mint address"**
- ✅ Verify address is valid base58 string (44 characters)
- ✅ Check token exists on the correct network
- ✅ Use token mint address, not token account address
- ✅ Validate on Solana Explorer

#### **"Pool already exists"**
- ✅ Check if pool was created in previous run
- ✅ Use different token pair if intentional
- ✅ Verify on explorer before re-running

#### **"Keypair file not found"**
- ✅ Run `pnpm studio generate-keypair` first
- ✅ Check `keypairFilePath` in config matches actual file
- ✅ Ensure file has correct permissions

### Network-Specific Issues

#### **Mainnet**
- Higher transaction costs
- Real money at risk
- Rate limits on public RPCs
- **Always test on devnet first**

#### **Devnet**
- Free SOL from faucet
- May have network instability
- Different program addresses
- Good for testing

#### **Localnet**
- Requires local validator running
- Use for development only
- Need to load program artifacts
- **Run `pnpm studio start-test-validator` first**

## 🚨 Critical AI Guidelines

### Required Before Execution
1. ✅ Validate config file syntax (valid JSONC)
2. ✅ Confirm keypair.json exists and is valid
3. ✅ Check wallet SOL balance (≥0.1 SOL recommended)
4. ✅ Verify RPC endpoint is responsive
5. ✅ Use dry-run first for new configurations
6. ✅ Test on devnet before mainnet
7. ✅ Validate all mint addresses on explorer

### Never Modify These Files
- `src/` directory contents (core logic)
- `package.json` (dependencies) 
- `.gitignore`
- Any file not in `config/` directory
- `keypair.json` (generate via script only)

### Always Modify These Files
- `config/*.jsonc` files for parameters
- Environment variables via `.env` file
- Use `generate-keypair` script for wallet setup

## 📈 Advanced Features

### Compute Unit Optimization
Adjust priority fees in config:
```jsonc
{
  "computeUnitPriceMicroLamports": 100000  // Higher = faster execution
}
```

### Multi-Network Support
Each config supports different networks simultaneously by changing `rpcUrl`.

### Batch Operations
Multiple actions can be chained for complex workflows:
```bash
pnpm studio dbc-create-config && pnpm studio dbc-create-pool
```

## 📁 Project Structure & File Locations

### Directory Overview
```
studio/
├── config/                       # Configuration files (AI modifies these)
│   ├── alpha_vault_config.jsonc  # Alpha Vault settings
│   ├── dbc_config.jsonc          # Dynamic Bonding Curve settings
│   ├── damm_v1_config.jsonc      # DAMM V1 pool settings
│   ├── damm_v2_config.jsonc      # DAMM V2 pool settings
│   └── dlmm_config.jsonc         # DLMM pool settings
├── src/                          # Source code (AI never modifies)
│   ├── actions/                  # Executable actions
│   │   ├── dbc/                  # DBC protocol actions
│   │   ├── damm_v1/              # DAMM V1 actions
│   │   ├── damm_v2/              # DAMM V2 actions
│   │   ├── dlmm/                 # DLMM actions
│   │   ├── alpha_vault/          # Alpha vault actions
│   │   └── settings/             # Utility actions
│   ├── lib/                      # Protocol libraries
│   ├── helpers/                  # Helper functions
│   ├── utils/                    # Utility types and constants
│   └── tests/                    # Test artifacts and data
├── data/                         # Static data files
├── test-ledger/                  # Local validator data
├── .env                          # Environment variables (create from .env.example)
├── keypair.json                  # Generated wallet file
├── package.json                  # Script definitions
└── LLM.txt                       # This AI guide
```

### Key Files for AI Operations

#### **Configuration Files** (Always Edit)
- `config/*.jsonc` - Protocol-specific parameters
- `.env` - Environment variables (RPC URL, private key)

#### **Generated Files** (Never Edit Directly)
- `keypair.json` - Auto-generated from private key
- `dist/` - Compiled output
- `node_modules/` - Dependencies

#### **Important Executables**
- `package.json` - Contains all available npm scripts
- `src/actions/**/*.ts` - Individual protocol operations

### File Permissions & Safety
- **Read-only**: Everything in `src/` directory
- **Configurable**: Everything in `config/` directory
- **Generated**: `keypair.json`, `dist/`, `node_modules/`

## 🔗 Integration Points

### With Other Tools
- **Solana Explorer**: Verify transactions (`https://explorer.solana.com/`)
- **DexScreener**: Monitor pools (`https://dexscreener.com/solana/`)
- **Jupiter**: Token swaps (`https://jup.ag/`)
- **Meteora App**: UI management (`https://app.meteora.ag/`)

### API Integration
All actions output structured data suitable for:
- Database storage (JSON format)
- API responses (structured output)
- Dashboard integration (real-time data)
- Monitoring systems (transaction tracking)

### Common Integration Patterns
```bash
# Capture output for processing
OUTPUT=$(pnpm studio dbc-create-pool --config ./studio/config/dbc_config.jsonc 2>&1)
echo "$OUTPUT" | grep "Pool Address:" | cut -d' ' -f3

# Chain operations
pnpm studio dbc-create-config --config ./studio/config/dbc_config.jsonc && \
pnpm studio dbc-create-pool --config ./studio/config/dbc_config.jsonc
```

---

**🎯 AI Success Checklist**
- [ ] Config file edited correctly with valid JSON syntax
- [ ] Dry run executed successfully without errors
- [ ] Adequate SOL balance confirmed (≥0.1 SOL)
- [ ] Network matches intention (mainnet/devnet/localnet)
- [ ] All mint addresses validated on explorer
- [ ] Script execution monitored for completion
- [ ] Transaction verified on Solana Explorer
- [ ] Output addresses/signatures saved for future use
- [ ] Integration points tested if applicable
