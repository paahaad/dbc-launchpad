# LLM.txt - Meteora Invent Repository

**AI-Optimized Monorepo for Solana DeFi Operations with Meteora**

## 🎯 Quick AI Context

Meteora Invent is a comprehensive toolkit consisting of everything you need to invent innovative token launches on Meteora. Meet **Metsumi**, your personal launch assistant engineered to help you launch anything and do any action on Meteora programs with just a few configurations and CLI commands.

### Core Components:
- **Studio**: Scripts for doing any action on Meteora programs
- **Scaffolds**: Production-ready frontend application templates compatible with Meteora's Dynamic Bonding Curve program.
- **Shared Packages**: Reusable configurations, utilities, and TypeScript settings

**AI Navigation**: Follow the hierarchical LLM.txt structure → Each directory contains specific AI guidance

## 📊 Repository Architecture

### **Core Workspaces**
- **`studio/`** → **Scripts Operations**: Meteora program actions, config-driven automation for Meteora programs
- **`scaffolds/`** → **Frontend Templates**: Production-ready UI applications
- **`packages/`** → **Shared Code**: ESLint, Prettier, TypeScript configs, and utility functions

### **AI-Friendly Design**
- ✅ **Hierarchical LLM.txt**: Detailed guidance at every level
- ✅ **Config-Driven**: All parameters externalized to JSONC files
- ✅ **Safe Execution**: Built-in dry-run and validation modes
- ✅ **Clear Boundaries**: Explicit files AI can/cannot modify
- ✅ **Metsumi**: (coming soon)

## 🚀 Global Setup & Prerequisites

### **System Requirements**
- **Node.js** >= 18.0.0
- **pnpm** >= 10.0.0 (package manager)
- **Solana wallet** with SOL balance
- **RPC endpoint** (recommended: Helius, QuickNode, or similar)

### **Initial Repository Setup**
```bash
# 1. Clone repository
git clone https://github.com/MeteoraAg/meteora-invent.git
cd meteora-invent

# 2. Install all dependencies (handles workspaces automatically)
pnpm install

# 3. Build all packages (creates shared libraries)
pnpm build

# 4. Validate environment (optional but recommended)
pnpm validate-env
```

### **Environment Configuration Pattern**
Each workspace follows this pattern:
```bash
# Navigate to workspace
cd studio/  # or scaffolds/fun-launch/, etc.

# Copy environment template
cp .env.example .env

# Edit with your settings
# - RPC_URL=your_rpc_endpoint
# - PAYER_PRIVATE_KEY=your_wallet_private_key
# - Other workspace-specific variables
```

## 🗺️ AI Navigation Map

### **🎯 Task-Based Navigation**

| **Goal** | **Navigate To** | **Purpose** |
|----------|----------------|-------------|
| Launch new token | `studio/LLM.txt` → DBC section | Token deployment with bonding curve |
| Create AMM pools | `studio/LLM.txt` → DAMM V2 section | Liquidity pool creation |
| Concentrated liquidity | `studio/LLM.txt` → DLMM section | Advanced position management |
| Build trading UI | `scaffolds/fun-launch/LLM.txt` | Complete frontend application |
| Migrate DBC→AMM | `studio/LLM.txt` → Migration workflows | Pool graduation process |
| Configure shared tools | `packages/LLM.txt` | ESLint, TypeScript, utilities |

### **🔄 Protocol Decision Tree**

**New Token Launch**
```
Is this a new token? 
├─ Yes → Start with DBC (studio/LLM.txt)
│  ├─ Need fair launch? → DBC with bonding curve
│  └─ Ready for AMM? → Migrate DBC → DAMM V2
└─ No → Existing token pools
   ├─ Standard AMM → DAMM V2 (studio/LLM.txt)  
   ├─ Yield farming → DAMM V1 (studio/LLM.txt)
   └─ Advanced LP → DLMM (studio/LLM.txt)
```

### **⚡ Quick Command Reference**

| **Operation** | **Command** | **Details** |
|---------------|-------------|-------------|
| Studio actions | `pnpm studio [action-name]` | All protocol operations |
| Frontend dev | `pnpm scaffold dev` | Run all scaffold dev servers |
| Type checking | `pnpm type-check` | Validate TypeScript across repo |
| Linting | `pnpm lint` | Check all workspaces |
| Build all | `pnpm build` | Compile all packages |
| Clean all | `pnpm clean` | Remove artifacts and node_modules |
| Format code | `pnpm format` | Format all code with Prettier |
| Check formatting | `pnpm format:check` | Check code formatting |
| Validate environment | `pnpm validate-env` | Validate environment setup |
| Sync dependencies | `pnpm syncpack:fix` | Fix dependency mismatches |

## 📁 Hierarchical Repository Structure

```
meteora-invent/
├── 📄 LLM.txt                        # THIS FILE - Repository navigation & setup
├── 📄 package.json                   # Root scripts & workspace configuration
├── 📄 turbo.json                     # Build system configuration
├── 📄 pnpm-workspace.yaml            # Workspace definitions
│
├── 🏗️ studio/                        # Scripts - Program scripts (@meteora-invent/studio)
│   ├── 📄 LLM.txt                    # ⭐ STUDIO MASTER GUIDE (updated & comprehensive)
│   ├── 📄 package.json               # Studio-specific scripts (pnpm studio ...)
│   ├── 📄 README.md                  # Studio documentation
│   ├── 📁 config/                    # ⚙️ Configuration files (AI modifies these)
│   │   ├── alpha_vault_config.jsonc  # Alpha Vault settings
│   │   ├── dbc_config.jsonc          # Dynamic Bonding Curve settings
│   │   ├── damm_v1_config.jsonc      # DAMM V1 pool settings
│   │   ├── damm_v2_config.jsonc      # DAMM V2 pool settings
│   │   └── dlmm_config.jsonc         # DLMM pool settings
│   ├── 📁 data/                      # Static data files and examples
│   │   ├── image/                    # Sample token images
│   │   ├── kv_proof_example.json     # KV proof examples
│   │   ├── kv_proofs/                # KV proof data
│   │   └── whitelist_wallet_example.csv # Wallet whitelist examples
│   ├── 📁 src/                       # 🔒 Source code (AI never modifies)
│   │   ├── actions/                  # Executable protocol actions
│   │   │   ├── alpha_vault/          # Alpha Vault actions
│   │   │   ├── damm_v1/              # DAMM V1 actions
│   │   │   ├── damm_v2/              # DAMM V2 actions
│   │   │   ├── dbc/                  # DBC actions
│   │   │   ├── dlmm/                 # DLMM actions
│   │   │   └── settings/             # Utility actions (generate keypair, airdrop SOL on devnet/localnet)
│   │   ├── lib/                      # Protocol-specific libraries
│   │   ├── helpers/                  # Utility functions
│   │   ├── tests/                    # Test artifacts and data
│   │   └── utils/                    # Types and constants
│   ├── 📁 test-ledger/               # Local validator data (generated)
│   ├── 📄 .env                       # Environment variables (create from .env.example)
│   ├── 📄 keypair.json               # Generated wallet file
│   ├── 📄 baseMintKeypair.json       # Generated base mint keypair
│   └── 📄 mint-keypair.json          # Generated mint keypair
│
├── 🎨 scaffolds/                     # FRONTEND - Production-ready templates
│   ├── 📄 LLM.txt                    # Scaffold overview & usage guide
│   └── 📁 fun-launch/                # Token launchpad template (@meteora-invent/scaffold/fun-launch)
│       ├── 📄 LLM.txt                # ⭐ DETAILED FRONTEND GUIDE
│       ├── 📄 README.md              # Fun Launch specific documentation
│       ├── 📄 package.json           # Next.js application scripts
│       ├── 📄 next.config.ts         # Next.js configuration
│       ├── 📄 tailwind.config.js     # Tailwind CSS configuration
│       ├── 📄 tsconfig.json          # TypeScript configuration
│       ├── 📁 src/                   # React components & pages
│       │   ├── components/           # Reusable UI components
│       │   │   ├── ui/               # Base components (Button, Dialog, etc.)
│       │   │   ├── Token/            # Token-specific components
│       │   │   ├── TokenChart/       # TradingView chart integration
│       │   │   ├── TokenHeader/      # Token page headers
│       │   │   ├── TokenTable/       # Transaction and holder tables
│       │   │   ├── Terminal/         # Trading interface
│       │   │   ├── Explore/          # Token exploration components
│       │   │   └── CreatePoolButton.tsx # Pool creation
│       │   ├── pages/                # Next.js routes
│       │   │   ├── _app.tsx          # App wrapper
│       │   │   ├── index.tsx         # Home/explore page
│       │   │   ├── create-pool.tsx   # Pool creation page
│       │   │   ├── token/[tokenId].tsx # Dynamic token pages
│       │   │   └── api/              # API routes
│       │   ├── contexts/             # React contexts for state
│       │   ├── hooks/                # Custom React hooks
│       │   ├── lib/                  # Utility functions
│       │   ├── types/                # TypeScript definitions
│       │   ├── icons/                # SVG icons & components
│       │   └── styles/               # Global styles
│       ├── 📁 public/                # Static assets
│       │   ├── favicon.ico
│       │   ├── coins/                # Token icons
│       │   └── *.svg                 # Various UI icons
│       └── 📄 .env.example           # Frontend environment template
│
└── 📦 packages/                      # SHARED - Reusable configurations
    ├── 📄 LLM.txt                    # Shared packages guide
    ├── 📁 config/                    # Shared configurations
    │   ├── eslint/                   # ESLint configurations (@meteora-invent/config-eslint)
    │   │   ├── index.js              # Base ESLint config
    │   │   ├── next.js               # Next.js specific rules
    │   │   ├── node.js               # Node.js specific rules
    │   │   └── package.json
    │   ├── prettier/                 # Prettier configurations (@meteora-invent/config-prettier)
    │   │   ├── index.js              # Prettier formatting rules
    │   │   └── package.json
    │   ├── typescript/               # TypeScript configurations (@meteora-invent/config-typescript)
    │   │   ├── base.json             # Common TypeScript settings
    │   │   ├── nextjs.json           # Next.js projects
    │   │   ├── node.json             # Node.js scripts
    │   │   └── package.json
    │   └── tsconfig.json             # Root TypeScript config
    └── 📁 shared/                    # Shared utilities
        └── utils/                    # Common utility functions (@meteora-invent/utils)
            ├── src/                  # Source code
            │   ├── formatting.ts     # Text formatting utilities
            │   ├── numbers.ts        # Number formatting utilities
            │   └── index.ts          # Main exports
            ├── package.json
            └── tsconfig.json
```

## 🛡️ AI Safety & Security Guidelines

### **Critical Rules for AI**
1. ✅ **Always Read LLM.txt First**: Each directory contains specific guidance
2. ✅ **Use Dry-Run Mode**: Set `"dryRun": true` in configs for testing
3. ✅ **Validate Before Execute**: Run validation commands before operations
4. ✅ **Test on Devnet**: Never start with mainnet for new configurations
5. ✅ **Follow File Permissions**: Only modify files in designated directories

### **Files AI Can Modify**
- `studio/config/*.jsonc` - Protocol configurations
- `scaffolds/*/.*env*` - Environment configurations  
- `scaffolds/*/src/**` - Frontend source code (when building UIs)

### **Files AI Must NEVER Modify**
- `studio/src/**` - Program logic and actions
- `**/package.json` - Dependencies and scripts (unless explicitly requested)
- `**/node_modules/**` - Generated dependencies
- `**/.git/**` - Git repository data

### **Environment Security**
```bash
# ✅ GOOD - Use environment variables
PAYER_PRIVATE_KEY=your_private_key_in_base58_format
RPC_URL=https://your-rpc-endpoint.com

# ❌ BAD - Never hardcode in source
const privateKey = "actual_private_key_here"  // NEVER DO THIS
```

## 🌍 Network Configuration Guide

### **Network Selection by Use Case**

| **Network** | **Purpose** | **Cost** | **Setup** |
|-------------|-------------|----------|-----------|
| **Localnet** | Development & Testing | Free | `pnpm studio start-test-validator` |
| **Devnet** | Integration Testing | Free (faucet) | Set `rpcUrl: "https://api.devnet.solana.com"` |
| **Mainnet** | Production | Real SOL | Set `rpcUrl: "https://api.mainnet-beta.solana.com"` |

### **RPC Endpoint Recommendations**
- **Development**: Public RPC (free, rate-limited)
- **Production**: Private RPC (Helius, QuickNode, Alchemy)
- **High Volume**: Dedicated RPC with higher rate limits

## 🎯 Next Steps for AI

### **New to Repository?**
1. **To do actions on Meteora programs**: `studio/LLM.txt` - Comprehensive studio guide
2. **To build the frontend user interface**: `scaffolds/fun-launch/LLM.txt` - UI development
3. **Common configuration files**: `packages/LLM.txt` - Shared tools setup


## 📚 Support & Resources

### **Documentation**
- **Meteora Docs**: https://docs.meteora.ag - Meteora protocol documentation
- **Next.js Docs**: https://nextjs.org/docs - Next.js frontend framework documentation
- **Solana Docs**: https://solana.com/docs - Solana blockchain fundamentals

### **Tools & Explorers**
- **Solana Explorer**: https://explorer.solana.com - Transaction verification
- **Jupiter**: https://jup.ag - Token swaps and aggregation
- **DexScreener**: https://dexscreener.com/solana - Pool analytics

### **Development Tools**
- **Solana CLI**: Command-line tools for Solana
- **Anchor**: Framework for Solana program development
- **TypeScript**: Type-safe development

---

**🎯 Remember**: This is a hierarchical system - each LLM.txt provides progressively more detailed guidance as you navigate deeper into specific workspaces. Always start with the LLM.txt in your target directory!
