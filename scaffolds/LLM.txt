# LLM.txt - Meteora Scaffolds

**AI-Optimized Frontend Development Guide**

## 🎯 Quick AI Context

Meteora Scaffolds provides production-ready **React/Next.js** templates for building DeFi applications. Each scaffold is:
- ✅ **Full-Stack Ready**: Complete frontend with backend integration
- ✅ **Protocol Integrated**: Pre-connected to Meteora protocols
- ✅ **AI-Friendly**: Clear structure, comprehensive documentation
- ✅ **Production Grade**: Optimized, tested, deployable

**AI Navigation**: For detailed frontend guidance → `scaffolds/dbc-launchpad/LLM.txt`

## 🏗️ Scaffold Architecture

### **Available Templates**

| **Scaffold** | **Framework** | **Purpose** | **Status** |
|-------------|---------------|-------------|------------|
| **dbc-launchpad** | Next.js + TypeScript | DBC token launchpad & trading UI | ✅ Production Ready |
| **amm-interface** | Next.js + TypeScript | AMM pool management | 🚧 Coming Soon |
| **yield-dashboard** | Next.js + TypeScript | Yield farming interface | 🚧 Coming Soon |

### **Core Technology Stack**
- **Framework**: Next.js 14+ with App Router
- **Language**: TypeScript (strict mode)
- **Styling**: Tailwind CSS + CSS Modules
- **State**: React Context + Custom Hooks
- **Blockchain**: @solana/web3.js + Wallet Adapter
- **Protocols**: Meteora DBC SDK (@meteora-ag/dynamic-bonding-curve-sdk)

## 🚀 Quick Start Workflows

### **Workflow 1: Launch DBC Token Platform (dbc-launchpad)**
```bash
# 1. Copy scaffold to new project
cp -r scaffolds/dbc-launchpad /path/to/your-dbc-launchpad
cd /path/to/your-dbc-launchpad

# 2. Environment setup
cp .env.example .env
# Edit .env with:
# NEXT_PUBLIC_RPC_URL=your_rpc_endpoint
# NEXT_PUBLIC_NETWORK=mainnet-beta
# R2_ACCESS_KEY_ID=your_r2_access_key
# POOL_CONFIG_KEY=your_pool_config_key

# 3. Install & develop
pnpm install
pnpm dev  # Opens http://localhost:3000

# 4. Customize & deploy
pnpm build && pnpm start
```

### **Workflow 2: Custom DeFi Application**
```bash
# 1. Start with closest scaffold
cp -r scaffolds/dbc-launchpad /path/to/custom-app
cd /path/to/custom-app

# 2. Modify for your needs
# - Update components in src/components/
# - Add new pages in src/pages/
# - Integrate additional protocols

# 3. Deploy
vercel deploy  # or your preferred platform
```

## 📁 Scaffold Structure & Architecture

### **Universal Scaffold Pattern**
```
scaffold-name/
├── 📄 LLM.txt                  # AI guide for this scaffold
├── 📄 package.json             # Dependencies & scripts
├── 📄 next.config.ts           # Next.js configuration
├── 📄 tailwind.config.js       # Styling configuration
├── 📄 .env.example             # Environment template
│
├── 📁 src/                     # Source code (AI can modify)
│   ├── 📁 components/          # Reusable UI components
│   │   ├── ui/                 # Base components (Button, Input, etc.)
│   │   ├── Token/              # Token-specific components
│   │   ├── Terminal/           # Trading interfaces
│   │   └── Layout/             # Layout components
│   ├── 📁 pages/               # Next.js routes
│   │   ├── _app.tsx            # App wrapper
│   │   ├── _document.tsx       # HTML document
│   │   ├── index.tsx           # Home page
│   │   └── api/                # API routes
│   ├── 📁 hooks/               # Custom React hooks
│   ├── 📁 contexts/            # React contexts for state
│   ├── 📁 lib/                 # Utility functions
│   ├── 📁 types/               # TypeScript definitions
│   └── 📁 styles/              # Global styles
│
├── 📁 public/                  # Static assets (AI can modify)
│   ├── favicon.ico
│   ├── logo.svg
│   └── coins/                  # Token icons
│
└── 📄 README.md               # Scaffold-specific documentation
```

## 🔧 AI Customization Patterns

### **Pattern 1: Branding Update**
```typescript
// 1. Update src/components/Header.tsx
const SITE_CONFIG = {
  name: "Your DBC Launchpad Name",
  logo: "/your-logo.svg",
  description: "Your DBC platform description"
};

// 2. Modify tailwind.config.js
theme: {
  extend: {
    colors: {
      primary: {
        50: '#your-primary-50',
        500: '#your-primary-500',
        900: '#your-primary-900'
      }
    }
  }
}

// 3. Update public/ assets
// - Replace favicon.ico
// - Replace logo.svg
// - Add custom icons
```

### **Pattern 2: New Page Addition**
```typescript
// 1. Create src/pages/your-page.tsx
import { Page } from '@/components/ui/Page';

export default function YourPage() {
  return (
    <Page title="Your Page">
      {/* Your content */}
    </Page>
  );
}

// 2. Add navigation link in Header component
<nav>
  <Link href="/your-page">Your Page</Link>
</nav>
```

### **Pattern 3: Protocol Integration**
```typescript
// 1. Install protocol SDK
pnpm add @your-protocol/sdk

// 2. Create src/hooks/useYourProtocol.ts
export function useYourProtocol() {
  const { connection } = useConnection();
  const { publicKey } = useWallet();
  
  const executeAction = async () => {
    // Protocol interaction logic
  };
  
  return { executeAction };
}

// 3. Use in components
const YourComponent = () => {
  const { executeAction } = useYourProtocol();
  // Component logic
};
```

## 🔄 Studio Integration Patterns

### **Backend-Frontend Communication**
```typescript
// Frontend calls backend operations
const createDBCToken = async (tokenParams) => {
  // 1. Frontend validates parameters
  if (!isValidDBCTokenParams(tokenParams)) {
    throw new Error('Invalid parameters');
  }
  
  // 2. Call studio script via API
  const response = await fetch('/api/create-dbc-token', {
    method: 'POST',
    body: JSON.stringify(tokenParams)
  });
  
  // 3. Handle response
  const result = await response.json();
  return result.poolAddress;
};

// API route (src/pages/api/create-dbc-token.ts)
export default async function handler(req, res) {
  // Configure studio script parameters
  const config = {
    ...req.body,
    rpcUrl: process.env.RPC_URL,
    keypairFilePath: process.env.KEYPAIR_PATH
  };
  
  // Execute studio script
  const result = await executeStudioScript('dbc-create-pool', config);
  res.json(result);
}
```

## 🛡️ Security & Best Practices

### **Critical Security Rules**
1. ✅ **Never expose private keys** in frontend code
2. ✅ **Use wallet adapters** for all signing operations
3. ✅ **Validate all inputs** before processing
4. ✅ **Handle errors gracefully** with user-friendly messages
5. ✅ **Use HTTPS** in production environments

### **Frontend Security Patterns**
```typescript
// ✅ GOOD - Use wallet adapter
const { signTransaction } = useWallet();
const signedTx = await signTransaction(transaction);

// ❌ BAD - Never hardcode keys
const secretKey = "your-secret-key-here"; // NEVER DO THIS

// ✅ GOOD - Environment variables for public data
const rpcUrl = process.env.NEXT_PUBLIC_RPC_URL;

// ✅ GOOD - Input validation
const isValidAddress = (address: string) => {
  try {
    new PublicKey(address);
    return true;
  } catch {
    return false;
  }
};
```

## 🚀 Performance Optimization

### **Bundle Optimization**
```typescript
// 1. Dynamic imports for large components
const TokenChart = dynamic(() => import('@/components/TokenChart'), {
  loading: () => <ChartSkeleton />
});

// 2. Tree-shake SDK imports
import { Connection } from '@solana/web3.js';
// Instead of: import * as web3 from '@solana/web3.js';

// 3. Optimize images
import Image from 'next/image';
<Image 
  src="/token-icon.png" 
  width={32} 
  height={32}
  alt="Token"
  priority={isAboveFold}
/>
```

### **Data Fetching Optimization**
```typescript
// Use SWR for caching
import useSWR from 'swr';

const useTokenData = (address: string) => {
  const { data, error } = useSWR(
    address ? `token-${address}` : null,
    () => fetchTokenData(address),
    { 
      refreshInterval: 5000,
      revalidateOnFocus: false 
    }
  );
  
  return { tokenData: data, loading: !data && !error, error };
};
```

## 🌐 Deployment Guide

### **Platform-Specific Configurations**

#### **Vercel (Recommended)**
```bash
# 1. Install Vercel CLI
npm i -g vercel

# 2. Deploy
vercel

# 3. Set environment variables in dashboard:
# - NEXT_PUBLIC_RPC_URL
# - NEXT_PUBLIC_NETWORK
# - R2_ACCESS_KEY_ID
# - POOL_CONFIG_KEY
# - Any API keys

# 4. Configure build settings
# Build Command: pnpm build
# Output Directory: .next
```

#### **Netlify**
```toml
# netlify.toml
[build]
  command = "pnpm build && pnpm export"
  publish = "out"

[build.environment]
  NODE_VERSION = "18"
  NPM_FLAGS = "--version"
```

#### **Self-Hosted**
```dockerfile
# Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package.json pnpm-lock.yaml ./
RUN npm i -g pnpm && pnpm install --frozen-lockfile
COPY . .
RUN pnpm build
EXPOSE 3000
CMD ["pnpm", "start"]
```

## 🛠️ Troubleshooting & Common Issues

### **Development Issues**

#### **"Module not found" Errors**
```bash
# 1. Clear node_modules and reinstall
rm -rf node_modules package-lock.json
pnpm install

# 2. Check import paths
# ✅ GOOD: import { Button } from '@/components/ui/Button';
# ❌ BAD: import { Button } from '../../../components/ui/Button';

# 3. Verify tsconfig.json paths
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  }
}
```

#### **"RPC connection failed"**
```typescript
// 1. Verify environment variables
console.log('RPC URL:', process.env.NEXT_PUBLIC_RPC_URL);

// 2. Test connection
const connection = new Connection(rpcUrl);
const health = await connection.getHealth();

// 3. Handle rate limits
const connection = new Connection(rpcUrl, {
  commitment: 'confirmed',
  httpHeaders: {
    'X-API-Key': process.env.RPC_API_KEY
  }
});
```

#### **"Wallet connection issues"**
```typescript
// 1. Update wallet adapter
pnpm add @solana/wallet-adapter-react@latest

// 2. Check wallet configuration
const wallets = useMemo(() => [
  new PhantomWalletAdapter(),
  new SolflareWalletAdapter(),
], []);

// 3. Handle connection errors
const { connect } = useWallet();
try {
  await connect();
} catch (error) {
  console.error('Wallet connection failed:', error);
}
```

## 📊 Monitoring & Analytics

### **Performance Monitoring**
```typescript
// 1. Add Vercel Analytics
import { Analytics } from '@vercel/analytics/react';

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <Analytics />
    </>
  );
}

// 2. Web Vitals tracking
export function reportWebVitals(metric) {
  console.log(metric);
  // Send to analytics service
}

// 3. Error tracking with Sentry
import * as Sentry from '@sentry/nextjs';
Sentry.init({ dsn: process.env.NEXT_PUBLIC_SENTRY_DSN });
```

## 🎯 AI Development Guidelines

### **Files AI Can Safely Modify**
- ✅ `src/components/**` - UI components
- ✅ `src/pages/**` - Routes and pages  
- ✅ `src/hooks/**` - Custom hooks
- ✅ `src/lib/**` - Utility functions
- ✅ `src/styles/**` - Styling files
- ✅ `public/**` - Static assets
- ✅ `.env*` - Environment configurations

### **Files AI Should Avoid**
- ❌ `package.json` - Unless explicitly requested
- ❌ `next.config.ts` - Core configuration
- ❌ `node_modules/**` - Dependencies
- ❌ `.next/**` - Build artifacts

### **Development Best Practices**
1. ✅ **Component Composition**: Build reusable, composable components
2. ✅ **Type Safety**: Use TypeScript strictly with proper types
3. ✅ **Error Boundaries**: Implement error handling at component level
4. ✅ **Loading States**: Always show loading states for async operations
5. ✅ **Mobile First**: Design for mobile devices first

---

**🎯 Next Steps for AI**: Choose your scaffold and navigate to its specific LLM.txt for detailed implementation guidance:
- **DBC Token Launchpad**: `scaffolds/dbc-launchpad/LLM.txt`
- **Custom DeFi App**: Start with dbc-launchpad and modify
- **Backend Integration**: Combine with `studio/LLM.txt` workflows
