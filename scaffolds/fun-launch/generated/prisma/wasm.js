
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GorScalarFieldEnum = {
  id: 'id',
  priceUsd: 'priceUsd',
  fetchedAt: 'fetchedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  address: 'address',
  name: 'name',
  symbol: 'symbol',
  url: 'url',
  mintAddress: 'mintAddress',
  userId: 'userId',
  website: 'website',
  twitter: 'twitter',
  supply: 'supply',
  decimals: 'decimals',
  bondingCurveSlope: 'bondingCurveSlope',
  metadataUrl: 'metadataUrl',
  imageUrl: 'imageUrl',
  description: 'description',
  contractAddress: 'contractAddress',
  marketCap: 'marketCap',
  totalRaised: 'totalRaised',
  launchDate: 'launchDate',
  telegram: 'telegram',
  discord: 'discord',
  holders: 'holders',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenPurchaseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenId: 'tokenId',
  quantity: 'quantity',
  pricePerToken: 'pricePerToken',
  totalPrice: 'totalPrice',
  purchaseDate: 'purchaseDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PoolConfigScalarFieldEnum = {
  id: 'id',
  address: 'address',
  tradeFee: 'tradeFee',
  protocolFee: 'protocolFee',
  referralFee: 'referralFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PoolScalarFieldEnum = {
  id: 'id',
  address: 'address',
  baseTokenId: 'baseTokenId',
  quoteTokenId: 'quoteTokenId',
  configId: 'configId',
  creator: 'creator',
  isActive: 'isActive',
  totalVolume: 'totalVolume',
  totalTrades: 'totalTrades',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PoolStateScalarFieldEnum = {
  id: 'id',
  poolId: 'poolId',
  lastUpdateTimestamp: 'lastUpdateTimestamp',
  sqrtPriceReference: 'sqrtPriceReference',
  volatilityAccumulator: 'volatilityAccumulator',
  volatilityReference: 'volatilityReference',
  baseReserve: 'baseReserve',
  quoteReserve: 'quoteReserve',
  currentPrice: 'currentPrice',
  rawData: 'rawData',
  createdAt: 'createdAt'
};

exports.Prisma.TokenLaunchScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  poolId: 'poolId',
  launchPrice: 'launchPrice',
  initialSupply: 'initialSupply',
  launchTxHash: 'launchTxHash',
  launchedAt: 'launchedAt'
};

exports.Prisma.TokenHolderScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  holder: 'holder',
  balance: 'balance',
  percentage: 'percentage',
  acquiredAt: 'acquiredAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  poolId: 'poolId',
  tokenId: 'tokenId',
  txHash: 'txHash',
  txType: 'txType',
  wallet: 'wallet',
  amountIn: 'amountIn',
  amountOut: 'amountOut',
  fee: 'fee',
  price: 'price',
  timestamp: 'timestamp',
  blockNumber: 'blockNumber',
  gasUsed: 'gasUsed',
  createdAt: 'createdAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  poolId: 'poolId',
  tokenId: 'tokenId',
  price: 'price',
  volume: 'volume',
  timestamp: 'timestamp',
  interval: 'interval',
  openPrice: 'openPrice',
  highPrice: 'highPrice',
  lowPrice: 'lowPrice',
  closePrice: 'closePrice',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TxType = exports.$Enums.TxType = {
  BUY: 'BUY',
  SELL: 'SELL',
  CREATE_POOL: 'CREATE_POOL',
  ADD_LIQUIDITY: 'ADD_LIQUIDITY',
  REMOVE_LIQUIDITY: 'REMOVE_LIQUIDITY',
  CLAIM_FEES: 'CLAIM_FEES'
};

exports.Prisma.ModelName = {
  Gor: 'Gor',
  User: 'User',
  Token: 'Token',
  TokenPurchase: 'TokenPurchase',
  PoolConfig: 'PoolConfig',
  Pool: 'Pool',
  PoolState: 'PoolState',
  TokenLaunch: 'TokenLaunch',
  TokenHolder: 'TokenHolder',
  Transaction: 'Transaction',
  PriceHistory: 'PriceHistory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
