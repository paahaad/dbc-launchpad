# LLM.txt - DBC Token Launchpad Scaffold


**AI-Optimized DBC Token Launchpad Development Guide**

## 🎯 Quick AI Context

DBC Token Launchpad is a **production-ready Next.js application** for building token launchpads with Meteora's Dynamic Bonding Curve (DBC) protocol. Features include:
- ✅ **DBC Token Launches**: Create tokens with Dynamic Bonding Curves for fair price discovery
- ✅ **Customizable Parameters**: Set initial price, bonding curve slope, and total supply
- ✅ **Token Discovery**: Real-time token exploration with filters & search
- ✅ **Trading Interface**: Complete buy/sell terminal with slippage controls
- ✅ **Protocol Integration**: Full Meteora DBC protocol support out-of-the-box
- ✅ **Mobile Responsive**: Optimized for all devices with modern UI

**AI Navigation**: This is the detailed implementation guide for the DBC Token Launchpad scaffold.

## 🚀 Instant Setup & Development

### **Quick Start (3 Steps)**
```bash
# 1. Copy scaffold to your project
cp -r scaffolds/fun-launch /path/to/your-dbc-launchpad
cd /path/to/your-dbc-launchpad

# 2. Environment setup
cp .env.example .env
# Edit .env with your settings:
# NEXT_PUBLIC_RPC_URL=https://your-rpc-endpoint.com
# NEXT_PUBLIC_NETWORK=mainnet-beta
# R2_ACCESS_KEY_ID=your_r2_access_key
# R2_SECRET_ACCESS_KEY=your_r2_secret_key
# R2_ACCOUNT_ID=your_r2_account_id
# R2_BUCKET=your_r2_bucket_name
# POOL_CONFIG_KEY=your_pool_config_key

# 3. Install & run
pnpm install && pnpm dev
# Opens http://localhost:3000
```

### **Environment Configuration**
```bash
# Required Environment Variables
NEXT_PUBLIC_RPC_URL=https://api.mainnet-beta.solana.com
NEXT_PUBLIC_NETWORK=mainnet-beta  # or 'devnet' for testing

# R2 Storage (for token metadata and images)
R2_ACCESS_KEY_ID=your_r2_access_key_id
R2_SECRET_ACCESS_KEY=your_r2_secret_access_key
R2_ACCOUNT_ID=your_r2_account_id
R2_BUCKET=your_r2_bucket_name

# DBC Protocol Configuration
POOL_CONFIG_KEY=your_pool_config_key

# Optional but Recommended
NEXT_PUBLIC_ANALYTICS_ID=your_analytics_id
NEXT_PUBLIC_SENTRY_DSN=your_sentry_dsn
```

## 📁 Detailed Project Architecture

### **Complete File Structure**
```
dbc-launchpad/
├── 📄 LLM.txt                     # THIS FILE - AI guidance
├── 📄 package.json                # Dependencies & scripts
├── 📄 next.config.ts               # Next.js configuration
├── 📄 tailwind.config.js           # Styling configuration
├── 📄 .env.example                 # Environment template
│
├── 📁 src/                         # Source code (AI can modify)
│   ├── 📁 components/              # UI components
│   │   ├── 📁 ui/                  # Base components
│   │   │   ├── button.tsx          # Button component
│   │   │   ├── Skeleton.tsx        # Loading skeletons
│   │   │   ├── Dialog/             # Modal dialogs
│   │   │   └── Page/               # Page wrapper
│   │   ├── 📁 Token/               # Token-specific components
│   │   │   ├── TokenCard/          # Token display cards
│   │   │   ├── TokenHeader/        # Token page header
│   │   │   ├── TokenChart/         # Price charts
│   │   │   ├── TokenIcon/          # Token icons
│   │   │   └── TokenTable/         # Token data tables
│   │   ├── 📁 Terminal/            # Trading interface
│   │   │   └── index.tsx           # Main trading terminal
│   │   ├── 📁 Table/               # Data tables
│   │   ├── 📁 Explore/             # Token exploration
│   │   ├── 📁 Header.tsx           # App header/navigation
│   │   └── 📁 CreatePoolButton.tsx # Pool creation
│   ├── 📁 pages/                   # Next.js routes
│   │   ├── _app.tsx                # App wrapper & providers
│   │   ├── _document.tsx           # HTML document structure
│   │   ├── index.tsx               # Home/explore page
│   │   ├── create-pool.tsx         # DBC token launch page
│   │   ├── token/
│   │   │   └── [tokenId].tsx       # Dynamic token detail pages
│   │   └── api/                    # API routes
│   │       ├── send-transaction.ts # Transaction handling
│   │       └── upload.ts           # File upload & DBC pool creation
│   ├── 📁 contexts/                # React contexts for state
│   │   ├── DataStreamProvider.tsx  # Real-time data streaming
│   │   ├── ExploreProvider.tsx     # Token exploration state
│   │   ├── TokenChartProvider.tsx  # Chart data management
│   │   └── types.ts                # Context type definitions
│   ├── 📁 hooks/                   # Custom React hooks
│   │   ├── queries.tsx             # Data fetching hooks
│   │   ├── useMobile.ts            # Mobile detection
│   │   ├── useSendTransaction.ts   # Transaction hooks
│   │   └── useExploreGemsTokenList.ts # Token list management
│   ├── 📁 lib/                     # Utility functions
│   │   ├── utils.ts                # General utilities
│   │   ├── jotai.ts                # State management
│   │   ├── device.ts               # Device detection
│   │   └── format/                 # Formatting utilities
│   │       ├── date.ts             # Date formatting
│   │       └── number.ts           # Number formatting
│   ├── 📁 types/                   # TypeScript definitions
│   │   ├── fancytypes.ts           # Custom type definitions
│   │   └── jupiter.d.ts            # Jupiter API types
│   ├── 📁 icons/                   # SVG icons & components
│   ├── 📁 constants/               # App constants
│   └── 📁 styles/                  # Global styles
│       └── globals.css             # Global CSS
│
├── 📁 public/                      # Static assets (AI can modify)
│   ├── favicon.ico                 # App favicon
│   ├── coins/                      # Token icons
│   │   └── unknown.svg             # Default token icon
│   └── *.svg                       # Various UI icons
│
└── 📄 README.md                   # Project documentation
```

## 🎯 Core Application Features

### **1. DBC Token Launcher (Create Pool Page)**
- **Location**: `src/pages/create-pool.tsx`
- **Key Components**: Form validation, file upload, DBC parameter configuration
- **Features**:
  - ✅ Token name, symbol, and logo upload
  - ✅ Total supply configuration
  - ✅ Initial price setting (in SOL)
  - ✅ Bonding curve slope configuration
  - ✅ Token description and social links
  - ✅ Full DBC protocol integration via API

### **2. Token Explorer (Home Page)**
- **Location**: `src/pages/index.tsx`
- **Key Components**: `ExploreGrid`, `ExploreProvider`, `MobileExploreTabs`
- **Features**:
  - ✅ Real-time DBC token listings with WebSocket updates
  - ✅ Advanced filtering (age, volume, market cap, launchpad)
  - ✅ Multi-column sorting and search functionality
  - ✅ Mobile-optimized tabs for different token categories
  - ✅ Infinite scroll and pagination
  - ✅ Paused/active pool indicators

### **3. Token Detail Pages**
- **Location**: `src/pages/token/[tokenId].tsx`
- **Key Components**: `TokenHeader`, `TokenChart`, `Terminal`, `TokenTable`
- **Features**:
  - ✅ Interactive TradingView charts with technical indicators
  - ✅ Complete trading terminal with buy/sell functionality
  - ✅ Token metadata, social links, and statistics
  - ✅ Holder distribution and transaction history
  - ✅ Real-time price updates and order book data

### **4. Trading Terminal**
- **Location**: `src/components/Terminal/index.tsx`
- **Integration**: Jupiter aggregator for best prices
- **Features**:
  - ✅ Buy/sell interface with slippage controls
  - ✅ Transaction preview and confirmation
  - ✅ Wallet balance display and validation
  - ✅ Priority fee optimization
  - ✅ Transaction status tracking

## 🎨 AI Customization Patterns

### **Pattern 1: Complete DBC Branding Overhaul**
```typescript
// 1. Update src/components/Header.tsx
const SITE_CONFIG = {
  name: "Your DBC Launchpad",
  logo: "/your-dbc-logo.svg",
  tagline: "Launch tokens with Dynamic Bonding Curves",
  description: "Your DBC token launchpad description"
};

// 2. Modify tailwind.config.js for DBC brand colors
module.exports = {
  theme: {
    extend: {
      colors: {
        dbc: {
          50: '#f0f9ff',   // Lightest
          100: '#e0f2fe',
          500: '#0ea5e9',  // Primary DBC color
          600: '#0284c7',
          900: '#0c4a6e'   // Darkest
        },
        accent: '#your-accent-color'
      },
      fontFamily: {
        'dbc': ['Your Custom Font', 'sans-serif']
      }
    }
  }
}

// 3. Update public/ assets
// - Replace favicon.ico with your DBC icon
// - Add your-dbc-logo.svg to public/
// - Update og-image for social sharing

// 4. Modify src/pages/_document.tsx for meta tags
<Head>
  <title>Your DBC Launchpad - Dynamic Bonding Curve Token Platform</title>
  <meta name="description" content="Launch tokens with Dynamic Bonding Curves on Solana" />
  <meta property="og:title" content="Your DBC Launchpad" />
  <meta property="og:image" content="/og-image.png" />
</Head>
```

### **Pattern 2: Add Custom DBC Parameters**
```typescript
// 1. Update src/pages/create-pool.tsx
const dbcTokenSchema = z.object({
  // ... existing fields ...
  customDBCParam: z.number().min(0, 'Custom parameter must be positive'),
  launchStrategy: z.enum(['gradual', 'instant', 'timed']),
});

// 2. Add form fields for custom parameters
<div className="mb-4">
  <label htmlFor="customDBCParam" className="block text-sm font-medium text-gray-300 mb-1">
    Custom DBC Parameter
  </label>
  {form.Field({
    name: 'customDBCParam',
    children: (field) => (
      <input
        id="customDBCParam"
        name={field.name}
        type="number"
        className="w-full p-3 bg-white/5 border border-white/10 rounded-lg text-white"
        value={field.state.value}
        onChange={(e) => field.handleChange(Number(e.target.value))}
        required
        min={0}
      />
    ),
  })}
</div>
```

### **Pattern 3: Enhanced DBC Analytics**
```typescript
// 1. Create src/hooks/useDBCAnalytics.ts
export function useDBCAnalytics(tokenAddress: string) {
  const [analytics, setAnalytics] = useState(null);
  
  const fetchDBCAnalytics = async () => {
    // Fetch DBC-specific analytics
    const response = await fetch(`/api/dbc-analytics/${tokenAddress}`);
    const data = await response.json();
    setAnalytics(data);
  };
  
  return { analytics, fetchDBCAnalytics };
}

// 2. Add DBC analytics component
const DBCAnalytics = ({ tokenAddress }) => {
  const { analytics } = useDBCAnalytics(tokenAddress);
  
  return (
    <div className="dbc-analytics">
      <h3>DBC Analytics</h3>
      <div className="grid grid-cols-2 gap-4">
        <div>Bonding Curve Slope: {analytics?.slope}</div>
        <div>Price Discovery: {analytics?.priceDiscovery}</div>
        <div>Liquidity Depth: {analytics?.liquidityDepth}</div>
        <div>Fair Launch Score: {analytics?.fairLaunchScore}</div>
      </div>
    </div>
  );
};
```

## 🔄 DBC Protocol Integration

### **Full-Stack DBC Token Launch Flow**
```typescript
// Frontend: src/pages/api/launch-dbc-token.ts
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    // 1. Validate DBC parameters
    const dbcParams = validateDBCParams(req.body);
    
    // 2. Configure DBC pool creation
    const dbcConfig = {
      quoteMint: 'So11111111111111111111111111111111111111112', // SOL
      totalTokenSupply: dbcParams.totalSupply,
      initialPrice: dbcParams.initialPrice,
      bondingCurveSlope: dbcParams.bondingCurveSlope,
      rpcUrl: process.env.RPC_URL,
      keypairFilePath: process.env.KEYPAIR_PATH,
      dryRun: false
    };
    
    // 3. Execute DBC pool creation
    const result = await executeDBCPoolCreation(dbcConfig);
    
    // 4. Return results to frontend
    res.json({
      success: true,
      tokenMint: result.tokenMint,
      poolAddress: result.poolAddress,
      transactionSignature: result.signature
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
}

// Frontend: src/components/CreatePoolButton.tsx
const CreatePoolButton = () => {
  const [isCreating, setIsCreating] = useState(false);
  const { publicKey } = useWallet();
  
  const handleCreateDBCPool = async () => {
    if (!publicKey) {
      toast.error('Please connect your wallet');
      return;
    }
    
    setIsCreating(true);
    try {
      // Call DBC backend API
      const response = await fetch('/api/launch-dbc-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: tokenName,
          symbol: tokenSymbol,
          supply: totalSupply,
          initialPrice: initialPrice,
          bondingCurveSlope: bondingCurveSlope
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        toast.success('DBC Token launched successfully!');
        router.push(`/token/${result.tokenMint}`);
      } else {
        toast.error(result.error);
      }
    } catch (error) {
      toast.error('Failed to launch DBC token');
    } finally {
      setIsCreating(false);
    }
  };
  
  return (
    <button 
      onClick={handleCreateDBCPool}
      disabled={isCreating || !publicKey}
      className="bg-dbc-500 hover:bg-dbc-600 px-6 py-3 rounded-lg"
    >
      {isCreating ? 'Launching DBC Token...' : 'Launch DBC Token'}
    </button>
  );
};
```

## 📚 Component Reference & API

### **Core DBC Components**

#### **DBC Token Launch Form**
```typescript
// Usage in create-pool page
<DBCLaunchForm
  onSubmit={async (dbcParams) => {
    const result = await launchDBCToken(dbcParams);
    if (result.success) {
      toast.success('DBC Token launched!');
    }
  }}
  defaultValues={{
    tokenName: '',
    tokenSymbol: '',
    totalSupply: 1000000,
    initialPrice: 0.001,
    bondingCurveSlope: 1.0
  }}
/>

// Props interface
interface DBCLaunchFormProps {
  onSubmit: (params: DBCParams) => Promise<void>;
  defaultValues: Partial<DBCParams>;
  className?: string;
}
```

#### **DBC Analytics Dashboard**
```typescript
// Usage for DBC token analytics
<DBCAnalytics
  tokenAddress="token_mint_address"
  poolAddress="pool_address"
  data={dbcAnalyticsData}
  height={400}
  showBondingCurve={true}
  showPriceDiscovery={true}
/>

// Props interface
interface DBCAnalyticsProps {
  tokenAddress: string;
  poolAddress: string;
  data: DBCAnalyticsData;
  height?: number;
  showBondingCurve?: boolean;
  showPriceDiscovery?: boolean;
}
```

## 🔧 Advanced DBC Integration Patterns

### **Custom Hook for DBC Operations**
```typescript
// src/hooks/useDBCOperations.ts
export function useDBCOperations() {
  const { publicKey } = useWallet();
  const { connection } = useConnection();
  
  const launchDBCToken = async (dbcParams: DBCParams) => {
    if (!publicKey) throw new Error('Wallet not connected');
    
    try {
      // 1. Create DBC pool configuration
      const poolConfig = await createDBCPoolConfig(dbcParams);
      
      // 2. Initialize bonding curve parameters
      const bondingCurve = await initializeBondingCurve({
        initialPrice: dbcParams.initialPrice,
        slope: dbcParams.bondingCurveSlope,
        totalSupply: dbcParams.totalSupply
      });
      
      // 3. Launch token with DBC
      const result = await launchTokenWithDBC(poolConfig, bondingCurve);
      
      return { success: true, ...result };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };
  
  const getDBCPrice = async (tokenAddress: string, supply: number) => {
    // Calculate current price based on bonding curve
    const poolState = await getDBCPoolState(tokenAddress);
    return calculateBondingCurvePrice(poolState, supply);
  };
  
  return { launchDBCToken, getDBCPrice };
}
```

### **Real-Time DBC Price Feed**
```typescript
// src/hooks/useDBCPriceFeed.ts
export function useDBCPriceFeed(tokenAddress: string) {
  const [price, setPrice] = useState(null);
  const [bondingCurveData, setBondingCurveData] = useState(null);
  
  useEffect(() => {
    // Fetch initial DBC data
    const fetchDBCData = async () => {
      try {
        const [currentPrice, curveData] = await Promise.all([
          fetchDBCPrice(tokenAddress),
          fetchBondingCurveData(tokenAddress)
        ]);
        
        setPrice(currentPrice);
        setBondingCurveData(curveData);
      } catch (error) {
        console.error('Failed to fetch DBC data:', error);
      }
    };
    
    fetchDBCData();
    
    // Set up real-time DBC updates
    const ws = new WebSocket(`${WS_ENDPOINT}/dbc/${tokenAddress}`);
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setPrice(data.price);
      setBondingCurveData(data.bondingCurve);
    };
    
    return () => ws.close();
  }, [tokenAddress]);
  
  const priceChange24h = useMemo(() => {
    if (!bondingCurveData?.priceHistory) return 0;
    const oldPrice = bondingCurveData.priceHistory[0].price;
    const newPrice = price || bondingCurveData.priceHistory[bondingCurveData.priceHistory.length - 1].price;
    return ((newPrice - oldPrice) / oldPrice) * 100;
  }, [price, bondingCurveData]);
  
  return {
    price,
    bondingCurveData,
    priceChange24h
  };
}
```

## 🚀 Performance & Production Optimization

### **DBC-Specific Bundle Optimization**
```typescript
// next.config.ts
const nextConfig = {
  // Enable bundle analyzer
  webpack: (config, { dev, isServer }) => {
    if (!dev && !isServer) {
      config.resolve.alias = {
        ...config.resolve.alias,
        // Tree-shake unused DBC libraries
        '@meteora-ag/dynamic-bonding-curve-sdk': '@meteora-ag/dynamic-bonding-curve-sdk/dist/index.esm.js',
      };
    }
    return config;
  },
  
  // Image optimization for token logos
  images: {
    domains: ['your-cdn.com', 'arweave.net', 'r2.dev'],
    formats: ['image/webp', 'image/avif'],
  },
  
  // Experimental features
  experimental: {
    optimizeCss: true,
    scrollRestoration: true,
  }
};
```

## 🛡️ Security & Error Handling

### **DBC Parameter Validation**
```typescript
// src/lib/validation.ts
import { z } from 'zod';

export const DBCLaunchSchema = z.object({
  name: z.string().min(1).max(50).regex(/^[a-zA-Z0-9\s]+$/),
  symbol: z.string().min(1).max(10).regex(/^[A-Z0-9]+$/),
  totalSupply: z.number().positive().max(1e15),
  initialPrice: z.number().positive().min(0.000001),
  bondingCurveSlope: z.number().positive().min(0.1).max(10),
  description: z.string().max(500).optional(),
  website: z.string().url().optional(),
  twitter: z.string().url().optional(),
});

export const validateDBCLaunch = (data: unknown) => {
  try {
    return DBCLaunchSchema.parse(data);
  } catch (error) {
    if (error instanceof z.ZodError) {
      throw new Error(`DBC validation failed: ${error.errors.map(e => e.message).join(', ')}`);
    }
    throw error;
  }
};
```

## 🎯 Production Deployment Checklist

### **Pre-Deployment DBC Validation**
```bash
# 1. Build and test
pnpm build
pnpm start  # Test production build locally

# 2. DBC environment variables check
echo "Checking required DBC environment variables..."
node -e "
const required = ['NEXT_PUBLIC_RPC_URL', 'R2_ACCESS_KEY_ID', 'POOL_CONFIG_KEY'];
const missing = required.filter(key => !process.env[key]);
if (missing.length) {
  console.error('Missing required DBC env vars:', missing);
  process.exit(1);
}
console.log('✅ All required DBC env vars present');
"

# 3. Security audit
pnpm audit --audit-level moderate

# 4. Type checking
pnpm type-check

# 5. Bundle size analysis
ANALYZE=true pnpm build
```

---

**🎯 Ready for DBC Production**: Your DBC Token Launchpad scaffold is now equipped with comprehensive AI guidance, production-ready DBC patterns, and detailed implementation examples. Navigate back to `scaffolds/LLM.txt` for broader scaffold guidance or `studio/LLM.txt` for backend DBC integration workflows.
